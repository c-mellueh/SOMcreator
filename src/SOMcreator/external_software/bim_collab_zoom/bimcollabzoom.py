from __future__ import annotations

import datetime
import logging
import os
import uuid

from lxml import etree

from constants import value_constants
from src.SOMcreator import classes
from . import constants as c
from . import rule


def write_header(xml_header: etree.Element):
    etree.SubElement(xml_header, c.VERSION).text = "6"
    etree.SubElement(xml_header, c.APPVER).text = "Win - Version: 6.8 (build 6.8.26.0)"


# def write_rules(attribute: classes.Attribute, pset_name: str) -> etree.Element:
#     rule, xml_condition = _write_base(attribute.name, pset_name, c.STRING)
#
#     if not attribute.value:
#         condition.empty(xml_condition, attribute)
#         xml_action = etree.SubElement(rule, c.ACTION)
#         etree.SubElement(xml_action, c.TYPE).text = c.ADD
#
#     elif attribute.value_type == value_constants.LIST:
#         condition.not_in_list(xml_condition, attribute.value)
#
#     else:
#         print(f"{attribute.value_type} noch nicht implementiert")
#     return rule

def write_smartview(property_set: classes.PropertySet, author) -> etree.Element:
    sv = etree.Element(c.SVIEW)
    etree.SubElement(sv, c.TITLE).text = property_set.name
    etree.SubElement(sv, c.DESCRIPTION).text = f"Checks {property_set.name} for correct Values"
    etree.SubElement(sv, c.CREATOR).text = "christoph.mellueh@deutschebahn.com"
    etree.SubElement(sv, c.CREATIONDATE).text = str(datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
    etree.SubElement(sv, c.MODIFIER).text = author
    etree.SubElement(sv, c.MODIFICATIONDATE).text = str(datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
    etree.SubElement(sv, c.GUID).text = str(uuid.uuid4())
    xml_rules = etree.SubElement(sv, c.RULES)
    pset_name = property_set.name
    ident_attrib = property_set.object.ident_attrib
    rule_list:list[etree.Element] = list()

    for attribute in property_set.attributes:
        if attribute == ident_attrib:
            continue
        is_numeric = attribute.data_type in (value_constants.XS_INT, value_constants.XS_LONG, value_constants.XS_DOUBLE)
        if is_numeric:
            if not attribute.value:
                rule_list+= rule.add_if_not_existing(attribute.name, pset_name, c.DATATYPE_DICT[attribute.data_type])
            elif attribute.value_type == value_constants.LIST:
                rule_list += rule.numeric_list(attribute.name, attribute.property_set.name, attribute.value)
            elif attribute.value_type == value_constants.RANGE:
                rule_list+= rule.numeric_range(attribute.name,attribute.property_set.name,attribute.value)
            else:
                logging.error(f"No Function defined for {attribute.name} ({attribute.value_type}x{attribute.data_type}")

        elif attribute.data_type == value_constants.XS_STRING:
            if attribute.value_type == value_constants.FORMAT:
                rule_list+= rule.add_if_not_existing(attribute.name,pset_name,c.DATATYPE_DICT[attribute.data_type])
                continue

            if attribute.value:
                rule_list += rule.add_if_not_in_string_list(attribute.name, attribute.property_set.name,
                                                            attribute.value)
            else:
                rule_list += rule.add_if_not_existing(attribute.name, pset_name, c.DATATYPE_DICT[attribute.data_type])

        elif attribute.data_type == value_constants.XS_BOOL:
            rule_list += rule.add_if_not_existing(attribute.name, pset_name, c.DATATYPE_DICT[attribute.data_type])
        else:
            logging.error(f"No Function defined for {attribute.name} ({attribute.value_type}x{attribute.data_type}")

    rule_list+=rule.remove_if_not_in_string_list(ident_attrib.name, ident_attrib.property_set.name, ident_attrib.value)
    for xml_rule in rule_list:
        xml_rules.append(xml_rule)
    return sv


def write_smartviewset(obj: classes.Object, author):
    smartview_set = etree.Element(c.SMVSET)
    etree.SubElement(smartview_set, c.TITLE).text = obj.name
    etree.SubElement(smartview_set, c.DESCRIPTION).text = "generated by SOMcreator"
    etree.SubElement(smartview_set, c.GUID).text = str(uuid.uuid4())
    etree.SubElement(smartview_set, c.MODIFICATIONDATE).text = str(
        datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"))
    smartviews = etree.SubElement(smartview_set, c.SVIEWS)

    for property_set in list(obj.property_sets):
        smartviews.append(write_smartview(property_set, author))
    return smartview_set


def write_smartviewsets(object_list: list[classes.Object], author: str):
    smartviewsets = etree.Element(c.SMVSETS)
    for obj in object_list:
        if obj.is_concept:
            continue
        smartviewsets.append(write_smartviewset(obj, author))
    return smartviewsets


def main(object_list: list[classes.Object], save_path: os.PathLike | str, author="", ):
    header = etree.Element(c.BCSVF)
    write_header(header)
    svs = write_smartviewsets(object_list, author)

    with open(save_path, "wb") as file:
        file.write(etree.tostring(header, pretty_print=True))
        file.write(etree.tostring(svs, pretty_print=True))
